1. будем реализовывать
- mvc фреймворк
- пользовательскую часть
- администраторскую часть


2. струкутра приложения

кратко:
создать структуру приложения и установить composer

не кратко:
- создать струкутру приложения
   - app
     - controllers
     - models
     - views
     - widgets
   - config
   - public
   - tmp
     - cache
   - vendor
     - ishop
       - core
         - base
         - libs
- установить и настроить composer


3. конфигурация приложения
кратко:
- должны перенапраляться все запросы на папку publiс
- должны быть доступны константы в главной точке входа и подключен автозагрузчик


не кратко:
- создать index.php в папке public
- настроить .htaccess на папку public
- настроить .htaccess в папке public
- создать файл init.php и описать константы:
  - DEBUG
  - ROOT
  - WWW
  - APP
  - CORE
  - LIBS
  - CACHE
  - CONF
  - LAYAOT
  - PATH
    - необходимо вычислить программно из http://ishop2.loc/public/index.php
  - ADMIN
- подлкючить автозагручзичк в init.php к главной точке входа


4. класс реестр
кратко:
- при создании объекта класса класса App:
    - должен приходить и сохраняться URL запроса и стартоваться сессия
    - в публичном статичном свойстве класса app должен сохраняться объект класс Registry в единсвенном экземпляре
    - через статичное свойство - контейнер класс App должны быть доступны методы записи чтения и просмотра всех свойств
    - должен вызываться метод описаный в данном классе который запишет массив параметров params.php
        -admin_email
        -shop_name
        -pagination
        -smtp_login
        -smtp_password
- подключить функцию распечатки массивов


не кратко:
 - алгоритм класса реестр:
   - должен содержать свойство которое представляет из себя массив
   - должен содержать 2 метода:
     - сеттер должен записывать в данное свойство элемент ключ значение
     - геттер должен проверять, если в свойстве существует такой элемент с ключом, должен возращать этот элемент, если нет возвращать пустое значение
   - должен содержать метод который вернет свойство



5. класс обработки ошибок
кратко:
- при создании объекта класса класса App:
  - должен создаваться объекта класса обработки исключений который будет перехватывать исклюения вне блока try и catch

не кратко:
- в зависмисоти от константы debug должны подключаться шаблоны ошибок для dev и prod (шаблоны можно хранить в папке public/errors)
- если исключение передается с 404 ошибкой и debug выключен должен подключаться шаблон ошибок 404.php
- вне зависимости от константы должен создаваться файл error.log в директории tmp/error.log и логироваться данные:
  - дата
  - текст
  - файл
  - строка

Пример:
[2017-08-20 16:05:37] Текст ошибки: Страница не найдена | Файл: D:\WebServer\domains\ishop2.loc\public\index.php | Строка: 8

- шаблон prod - содерижит только текстовое сообщение "Произошла ошибка"
- шаблон dev -
    - код ошибки:
    - текст ошибки:
    - файл, в котором произошла ошибка:
    - строка, в которой произошла ошибка:



6. класс маршрутизатор 1
кратко:
- необходимо создать файл routes.php и через статичный метод класс router добавить правила маршрутизации для админской и пользовательской части
- описать класс router
- строки запросов могут быть такими:
  - admin
  - admin/page/edit
  - пустая строка
  - page/view


не кратко:
 - алгоритм класса router:
   - должен содержать 2 свойства которые представляет из себя массивы, в одном будет хранится таблица маршрутизаци в другом сам маршрут
   - должен содержать 5 методов:
     - метод добавления маршрутов
     - метод который вернет таблицу маршрутов
     - метод который вернет маршрут
     - метод который будет в завимоисти от другого метода вызывать контроллер
     - метод который будет возвращать true, если будет найдено соответствие в таблице маршрутов


7. класс маршрутизатор 2

не кратко:
- полученный url адрес должен сравниваться на соответсие шаблону регулярного выражения,
если url соответствует шаблону, маршрут записывается в свойство класса и возвращается true иначе false
- если в маршруте нет action по умолчнию должен записываться index
- если в маршпруте нет префикса, по умолчанию должна быть пустая строка, если есть должен добавляться обратный слэш к префиксу

- если маршпрут не найден, выбрасываем исключение что страница не найдена
- если маршрут найден формируем пространство имен для контроллера, например:
app\controllers\admin\MainController
  -также учесть что имя контроллера может быть и таким, например:
  page-new
- необходимо создать объект класса контроллера и передать ему маршрут
- необходимо вызвать действите контроллера


8. базовый контроллер | класс View. Часть 1  | класс View. Часть 2

- необходимо создать базовый класс контроллер с методами
  - construct - при создании объекта контроллера передается маршрут
  - set - в свойство data должны сохраняться данные полученные например от модели
  - setMeta - в свойство мета должны  сохраняться мета - данные
  - getView - должен создаваться объект вида и в метода render передаваться данные data
  - необходимо наследовать базовый контроллер не от ядра, а нашего контроллера приложения

- необходимо создать базовый класс вида с методами
  - construct - при создании объекта вида пробросить данные
  - render - подключить шаблон с видом и сделать доступными данные переданные из контроллера
  - getMeta - метод должен возвращать мета данные

- необходимо подключить виды и сохранить данные в буфер
app/views/имя контроллера/имя действия.php

- необходимо подключить шаблон и вывести из буфера вид
app/views/layouts/шаблон.php"

- необходимо задать шаблон по умолчанию из константы, если явно не передан false


11. класс модели

- необходимо вырезать явные гет параметры из строки запроса, например main/index/?id=1&id=2
  в QUERY_STRING попадет main/index/&id=1&id=2
  нужно возвращать main/index

- создать базовый класс модели с конструктором (свойства пока не объявляем, т.к. не понятно для чего они)
- создать файл config_db.php который содержит параметры для подлкючения к базе данных
- создать базу данных ishop2 и тестовую таблицу test
- создать класс DB реализующий паттерн Singleton


12. orm - readbean
- установить orm - readbean через composer
- при создании объекта класса модели должно устновливаться соеднинение с базой данных
- в классе DB - необходимо установить соедение с БД
- в базовом контролере, в любой части приложения нам потребуется соедение с БД

- получить все статьи и вывести заголовки статей в вид
- получить 1 статью через бинд данных

- если например у нас полей в таблице нет, readbean может на ходу создать поле - необходимо отключить эту возможность.
- включить режим отладки в зависимости от константы DEBUG
  - выводить все запросы которые мы выполняем


13. класс для кэширования

- создать класс кэширования содержащий методы set, get, delete.

set
- необходимо создать файл кэша по ключу и сериализовать данные в него,
также необходимо дать возможность указать параметром 0, если мы не хотим кэшировать данные

get
- необходимо получить данные из кэша, если они актуальны возвращаем данные из кэша, если нет удаляем файл

delete
- необходимо удалить файл кэша по ключу

пример работы с кэшом, если данные из кэша не были получены, необходимо их сохранить в кэш

































