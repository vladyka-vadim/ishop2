1 Перенос шаблона в структуру CMS
- создать главный шаблон и применить к главной странице
- вынести имзеняемую часть в вид главной страницы
- внести правки в хедере и перенести js - скрипты в футер

2. Структура БД
- объяснить поля таблиц

3. Вывод брендов
- вывести бренды на главной странице

4. Популярные товары
- вывести популярные товары и которые включены включены для публикации
- вместо класса item_add для добавления в корзину, будем реализовывать свой add-to-cart-link
- также необходимо предусмотреть, если не будет включен js у клиента, ссылка должна быть такой cart/add?id=
- предусмотреть старую цену
- по необходимости внести правки в верстку
- ссылка на товар должна формироваться product/алиас


5. Виджет выбора валют. Часть 1

- необходимо:
 - создать класс Currency
 - статичный метод для получения всех доступных валют из БД,
 в полученном массиве ключами должна быть валюта
 - полученный массив доступных валют необходимо записать в контейнер в базовом контроллере нашего приложения

- необходимо создать статичный метод который будет проверять в куки и в переданном массиве доступных валют
существует ли валюта и есть ли такой элемент в переданном массиве,
если да то запишем данный элемент массива в переменную и добавим еще элемент code с кодом валюты,
если нет возмьмем первый элемент и из переданного массива
- полученный массив текущей валюты необходимо записать в контейнер в базовом контроллере нашего приложения
- задай куки и проверь что записано в контейнере 
ИТОГО: необходим массив в выбранной валютой и все данными по ней


6. Виджет выбора валют. Часть 2
- при создании объекта класса Currency в шаблон должен выводится список валют и активная валюта
- описать методы __construct, run, getHtml

- создать контроллер валюты
  - при выборе валюты должна записаываться кука с валютой

- создать функцию редиректа
   - необходимо учитывать, что может параметором пепдаваться куда необходим редирект и учитывать реферер

7. Пересчет цены товара в выбранной валюте
- вернуть текущую валюта из контейнера и пересчитать в шаблоне


8. Виджет категорий. Часть 1

- создать класс Menu
  - construct
    - вписать в свойство класса путь к шаблону меню
  - getOptions - заполнить свойства класса класса переданными парметрами от виджета меню, если они существуют
  - run - вернуть html-меню если оно есть в кэше с определенным ключом,
  если нет, то чтобы не дергать лишний раз базу взять данные категорий из контейнера,
  если данных нет в контейнере запросить данные о базе. Данные необходимо получить тем или иным способом
  - output

- в базовом контроллере необходимо создать статичный метод который запишет в кэш все категории
  - полученные данные необходимо поместить в контейнер


9. Виджет категорий. Часть 2

- приведи примеры присваивания по ссылке для обычных переменных и для массивов (простой пример и с foreach).
  - прокоментрируй адреса (адреса ячеек и значения ячеек)

- описать методы getTree, getMenuHtml, catToTemplate

- ссылки категорий должны вести на контроллер категорий



<li>
	<a href="">Men</a>
	<ul>
		<li>
			<a href="">Электронные</a>
			<ul>
				<li> <a href=""> Casio </a></li>
			</ul>
		</li>
	</ul>
</li>

Свойства класса
$data;
$tree;
$menuHtml;
$tpl;
$container = 'ul';
$class = 'menu';
$table = 'category';
$cache = 3600;
$cacheKey = 'ishop_menu';
$attrs = [];
$prepend = '';


10. Виджет категорий. Часть 3
- подключить megamenu.js


11. Карточка товара. Часть 1
- прописать маршруты
- создать контроллер и метод контроллера - продукт получать по алиасу и статусу
- создать вид продукта
- задать мета данные и передать данные о продукте в вид
- по необходимости поправить js-скрипты


12. Карточка товара. Часть 2
- заполнить информацию о товаре
  - название, цена (старая цена), описание, категория
  - добавить возможность выбора кол-ва товаров - через обычный тег
  - кнопка добавления в корзину добавить класс add-to-cart-link и id=productAdd
    - по усмотрению выровнять кол-во товаров и кнопку добавления в корзину
  - должен работать функицонал выбора валюты


13. Карточка товара. Модуль Связанные товары

- вывести связанные товары в карточке товара и заполнить информацию о товаре
- кнопка добавления в корзину добавить класс add-to-cart-link
- должен работать функционал выбора валюты


14. Карточка товара. Картинки галереи
- вывести картинки галереи продукта
- если картинки галереи нет, вывыодить базовую картинку продукта


15. Карточка товара. Модуль Просмотренные товары
- в куки должны записываться просмотренные товары в формате id например 1.4.5
  - необходимо учитывать что массив кук может быть пустым
  - необходимо учитывать чтобы в массиве кук не было повторений

- необходимо учитывать, что метод который возвращает просмотренные товары может возвращать false и должен возращать только последние 3 записи



16. Карточка товара. Хлебные крошки
- исполльзуя контейнер категорий реализовать хлебные крошки главная -> категория -> подкатегория -> товар
  - необходимо учитывать, что id категории может и не быть
http://ishop2.vlad/category/


17. Карточка товара. Модификации товара
- получить все модификации запрошенного товара и передать их в вид
- реализовать JS код
- прописать атрибуты title, price, value, id для HTML





18. Корзина. Часть 1
- необходимо проверить установлены ли id товаров в дата-атрибутах
- при клике на корзину должны передаваться данные ajax-запросом id, кол-во товаров, id - модификации
 (обработчик через делегирование)
  - при успешной отправке должна вызываться функция
  - при ошибке должно появляться окно с сообщением

- создать контроллер
  - принять параметры, продумать условия
  - должны получить из бд данные продукта и модификации


19. Корзина. Часть 2
- необходимо создать объект класса корзины и передать ему полученные из бд данные
- записать товар в сессию, в сессии должекн храниться многомерный массив
- если приходит ajax - запрос, вызываем метод который подлкючит вид (например модального окна)




<pre>Array
(
    [cart.currency] => Array
        (
            [title] => доллар
            [symbol_left] =>  $
            [symbol_right] =>
            [value] => 1.00
            [base] => 1
            [code] => USD
        )

    [cart] => Array
        (
            [1] => Array
                (
                    [qty] => 1
                    [title] => Casio MRP-700-1AVEF
                    [alias] => casio-mrp-700-1avef
                    [price] => 300
                    [img] => p-1.png
                )

            [1-4] => Array
                (
                    [qty] => 1
                    [title] => Casio MRP-700-1AVEF (Red)
                    [alias] => casio-mrp-700-1avef
                    [price] => 310
                    [img] => p-1.png
                )

        )

    [cart.qty] => 2
    [cart.sum] => 610
)
</pre>

- поправить вывод модификаций если они у товара есть
- закоментировать js - скрипт корзины

20. Корзина. Часть 3

- взять html - шаблон модального окна bootstrap 3  (кнопки "продолжить покупки", "оформить заказ", "очистить корзину")
- описать шаблон корзины (фото, наименование, кол-во, цена, крестик,  итого, на сумму)
- если корзина пуста убрать кнопки офомить заказ и очистить корзину
- вывести ответ в тело модального окна и вывести его
- по необходимости подлкючить bootstrap js


21. Корзина. Часть 4

- реализовать мини-корзину, если корзина пуста показывать, текст что корзина пуста, если нет то выводить сумму.
- при клике на корзину выводить модальное окно
- реализовать без обновления страницы обновление суммы в мини корзине
- реализовать удаление элемента из корзины и пересчет


22. Корзина. Часть 5

- реализовать механизм очистки корзины одной кнопкой
- при выборе валюты пересчиать корзину
  - рассчитать пересчет суммы товаров если товар положен в базовой валюте

  - рассчитать пересчет суммы товаров если товар положен в не базовой валюте



23. Поиск. Часть 1
- подключить typehead.js (bundle)
- внести изменения в верстку элемента поиска
- описать js - скрипт
- создать контроллер и метод

В итоге должны работать подсказки.


24. Поиск. Часть 2
- при выборе элеметна из подсказок выводится страница поиска с выбранным элементом


25. Товары категории
- прописать маршрут для категорий
- создать контроллер
- создать класс модели которая будет возвращаться строку вложенных категорий (используй рекурсию)
  - к данной строке добавить категорию которую передаем
- создавть sql - запрос который вернет все товары указанных категорий
- передать данные в вид
- не забыть указать мета данные
- хлебные кроошки пока не формируем


26. КлассPagination
- вывести хлебные крошки
- необходитмо получить объект со свойствами
    public $currentPage;
    public $perpage;
    public $total;
    public $countPages;
    public $uri;

- в $uri должна записываться из http://ishop2.loc/category/men?page=5&sort=name
/category/men?sort=name

- должен быть сформирован html код со сслыками
        $back = null; // ссылка НАЗАД
        $forward = null; // ссылка ВПЕРЕД
        $startpage = null; // ссылка В НАЧАЛО
        $endpage = null; // ссылка В КОНЕЦ
        $page2left = null; // вторая страница слева
        $page1left = null; // первая страница слева
        $page2right = null; // вторая страница справа
        $page1right = null; // первая страница справа


27. Регистрация. Часть 1
- используя dropdown-toggle реалзиовать выпадающий список для пользователя
 - указать те ссылки если пользователь авторизован
   - добро пожаловать
   - выход
 - указать ссылки когда пользователь не авторизован
   - вход
   - регистрация
(пользователь будет хранится в сессии)

- описать какой конттроллер и методы будут использоваться
- описать класс модели пользователя (просто создать)
- ознакомиться с валидаторами для сервера и клиента (bootstrap validator и valitron)

- подготовить виды для (формы для входа - просто создать, регистрации - стандартная bootstrap форма)
   - поля формы логин, пароль, имя, email, адрес, зарегистроироваться
- посмотреть структуру БД


- описать свойства в классе модели пользователся (в нее будут приходить поля с формы)
- расширить функицонал базовой модели метод которйы будет загружать данные из формы в модель

- протестирновать на пример как заполняются поля с формы в атрибутах модели


28. Регистрация. Часть 2
(на этой стадии метод load не играет роли)

- установить valitron
- в базовом классе модели создать метод валидации
  - создать объект класса, передать правила валидации из свойств модели, выполнить валидацию, ошибки записать в свойство модели
  - в модели приложения задать правила валидации
    - сделать все пполя обязательными
    - поле email должно проверяться как email
    - поле password должно иметь минимальную длину
  - отправь форму посмотри проходит ли форма валидацию да или нет просто, если нет выведи ошибки


  - в базовом классе модели реализовать метод который вернет список ошибок
  - записать данные об ошибках в сессию
  - в контроллере получить ошибки и записать данные в сессию если валидацию пройдена
  - реаллизовать разметку в главном шаблоне для вывода ошибок или успешной валидации данных из сессии


  - русифицировать ошибки, какая ошибка в переводе
  - указать свои файлы переводов


29. Регистрация. Часть 3
- данные из атрибутиов модели необходимо загрузить в БД при помощи readbean
- доделать условия в контроллере
- пароль должен хранится в закодированным виде password_hash
- добавить того же пользователя и посмотреть на резульатат
- в модели пользователя описать метод который проверит на уникальность пользователся и email


30. Регистрация. Часть 4
- подключить валидатор js
  - добавить иконки (обратную связь) ко всем полям и подсказки (подсказка к паролю)
  - пароль должен проходить валидацию на 6 символов
  - сделать поля все поля обязательными
  - если поля не прошли валидацию, значения форм должны сохраниться
  - попраавить стили


31. Регистрация. Часть 5

- подготовить виды для (формы для входа - просто создать - стандартная bootstrap форма)
     - поля формы: логин, пароль

- описать метод loginAction и метод который будет авторизовывать ползьователя (учесть что может авторизовываться и админ)
  - мы получаем логин и пароль
    - если это администратор - пробуем вытащить бин с указазным логином и ролью админ
    - если это не администратор - пробуем вытащить бин
  если существует такой пользователь, то мы проверяем введенный введенный пароль, с тем хэшем который хранится в бине
  если пароли совпадают то мы записывем в сессию юзер все данные бина кроме пароль


!!! после регистра

32. Оформление заказа. Часть 1

- создать виды корзины
  - должна выводится таблица с продуктами и форма регистрации при оформлении, если пользователь авторизован, только поле с примечанием
- нам нужно проверить авторизовался пользователь или нет, если пользователь сохранен берем user_id
- необходимо солхранить user_id, примечание и мэйл юзера в массив
- создать модель заказа и создать статические методы
  - метод сохранения заказа
  - метод сохранения продукутов даннаго заказа
  - метод отправки на почту

- в методе сохранения передаем все сохраненные данные -  возвращать будет id заказа
- в методе отправки передаем id заказа и почту


33. Оформление заказа. Часть 2
- реализовать метод сохранения заказа в базе
  - такжде в этом методе обратиться методу сохранения продуктов данного заказа и передать id заказа


34. Оформление. Часть 3
- реализовать метод сохранения продуктов данного заказа
  - необходимо сформировать строку из товаров через запятую = (номер заказа, id продукта, кол-во, наименование, цена)
- установить swiftmailer


35. Оформление заказа. Часть 4
- настроить отправку почту по протоколу SMTP через yandex
- заполнить массив параметров

<?php

return [
    'admin_email' => 'vladyka.vadim@yandex.ru',
    'shop_name' => 'Магазин ishop2.loc',
    'pagination' => 3,
    'smtp_host' => 'smtp.yandex.ru',
    'smtp_port' => '465',
    'smtp_protocol' => 'ssl',
    'smtp_login' => 'vladyka.vadim@yandex.ru',
    'smtp_password' => 'hrsalnictqxzogxc',
];

- настроить программу
- настроить html вид письма для body
наименование, кол-во, цена, сумма
итого
на сумму

- почту отправлять на email пользователся и администратора

- после отправки - очистить корзину и вывести сообщение об успешном оформлении заказа


36. Фильтры. Часть 1
http://www.jooom.ru/php-mysql-pdo/63-struktura-tablits-dlya-kataloga-tovarov-internet-magazina.html
https://zlob.in/2013/01/struktura-tablic-dlya-kataloga-tovarov-internet-magazina/
http://softtime.ru/forum/read.php?id_forum=3&id_theme=88061
https://gist.github.com/greabock/afc4a08577806b60dc61

- создать в виджетах класс Filter и шаблон к нему
- при запуске приложения мы долнжы из кэша получить
  - группа фильтров (получить просто в виде ассоциативного массива)
  - фильтры которые относятся к той или иной группе (получить в виде ассоциативного массива и преобразовать)
- реализовать метод который вернет html
- описать шаблон виджета
  - вывести все группы и каждоый группы атрибуты
- добавить в шаблон картинку с классом preload и описать стили (прелоад должен срабатывать на прозрачном фоне)


37. Фильтры. Часть 2
- отмченные чекбоксы мы должны при изменении записывать в строку например 1,2,3
  - если нет отмченных чекбоксов страница должна перезагуружаться
  - если есть данные то выполняем аякс запрос
    - перед выполнением аякс-запроса, мы должны показать прелоадер и скрыть те продукуты
- далее тестово мы должны принять эти данные в контроллере и распечать массив GET
  !! ПОЧЕМУ В МАССИВЕ есть например  category/men
- после успешного аякс запроса с задержкой в пол секунды мы скрываем preloader и в HTML содержимое вернуть результат


38. Фильтры. Часть 3
https://developer.mozilla.org/ru/docs/Web/JavaScript/Guide/Regular_Expressions
- задача обновить адресную строку, при этом чтобы не произошло перезагрузки страницы
- после перезагрузки страницы, чтобьы все сохранилось и учитывалось

мы должны удалить из строки явных гет параметров фильтер с данными до амперсанда
?filter=1&sort=asc
и сформировать новую строку
/category/casio?sort=asc&filter=1

мы должны учесть что из строки явных гет параметров
?filter=1
может сформироваться такая строка
/category/casio?&filter=1
в таком случаем преобразовать
/category/casio?filter=1

*****
- создать статичный метод getFilter в классе Filter который удалит из строки все кроме цифр и запятой, последнюю запятую обрезать

- далее необхордимо сформировать подзапрос который вернет id продуктов которые входят во множество выбранных фильтров
сформировать можно в виде строки и дописать к основынм запросам
- затем выбьрать товары которые входят в категорию и всех полученных id

- сформировать вид и передать необходимые параметры


39. Фильтры. Часть 4

- необходимо при обновлении страницы оставлять активными отмеченные чекбоксы
  - необходимо перед передачей данных в шаблон фильтра получить строку из глобального массива filter
    разбить строку на массив и передать и сделать доступной в шаблоне
    далее создать условие при выводе чекбоксов, если id выводимого чекбокса есть в массиве, созддать переменную checked, иначе null

- может повторяться параметр фильтр, в классе пагинации, нужно использовать функцию preg_match_all
найти все соотсветсвия шаблону например filter=5,&
если таких больше 1 удалить из строки повтор


40. Фильтры. Часть 5
 - дописать запрос который выберет только те товары которые были сгруппированы 2 раза - нужэно это число получить
   (был сгруппирован или нет)
 - реализовать метод который вернет кол-во групп в которые входят выбранные фильтры



















































