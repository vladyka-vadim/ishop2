1. будем реализовывать
- mvc фреймворк
- пользовательскую часть
- администраторскую часть


2. струкутра приложения

кратко:
- создать структуру приложения и установить composer


3. конфигурация приложения

- должны перенапраляться все запросы на папку publiс
- должны быть доступны константы в главной точке входа и подключен автозагрузчик


4. класс реестр

- при создании объекта класса класса App:
    - должен приходить и сохраняться URL запроса и стартоваться сессия
    - в публичном статичном свойстве класса app должен сохраняться объект класс Registry в единсвенном экземпляре
    - через статичное свойство - контейнер класса App должны быть доступны методы записи чтения и просмотра всех свойств
    - должен вызываться метод описаный в данном классе который запишет массив параметров params.php
- подключить функцию распечатки массивов


5. класс обработки ошибок

- при создании объекта класса класса App:
  - должен создаваться объекта класса обработки исключений который будет перехватывать исклюения вне блока try и catch
- в зависмисоти от константы debug должны подключаться шаблоны ошибок для dev, prod, 404
- должен создаваться файл error.log


6. класс маршрутизатор 1

- описать класс router, который сравнивает поступивший запрос с имеющийся в нем маршрутами и соответсвенно определяет есть ли такая страница на сайте или нет
- создать файл routes.php и через статичный метод класс router добавить правила маршрутизации для админской и пользовательской части


7. класс маршрутизатор 2

- создать объект класса контроллера и передать ему данные о текущем маршруте
- вызвать действите контроллера


8. базовый контроллер

- необходимо создать базовый класс контроллера


9. Класс View. Часть 1 | класс View. Часть 2

- необходимо создать базовый класс вида


11. класс модели

- необходимо вырезать явные гет параметры из строки запроса, например main/index/?id=1&id=2
- создать базовый класс модели
- создать файл config_db.php который содержит параметры для подлкючения к базе данных
- создать базу данных ishop2 и тестовую таблицу test
- создать класс DB реализующий паттерн Singleton


12. orm - readbean
- установить orm - readbean через composer
- при создании объекта класса модели должно устновливаться соеднинение с базой данных
- в классе DB - необходимо установить соедение с БД
- в любой части приложения нам потребуется соедение с БД


- если например у нас полей в таблице нет, readbean может на ходу создать поле - необходимо отключить эту возможность.
- включить режим отладки в зависимости от константы DEBUG
- выводить все запросы которые мы выполняем


13. класс для кэширования

- создать класс кэширования содержащий методы set, get, delete.




































